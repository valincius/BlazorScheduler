@page "/"
@using System.Drawing

@using BlazorScheduler
@using BlazorScheduler.Core

@inject HttpClient HttpClient

<label>Start Day of Week</label>
<select @bind="StartDayOfWeek">
    <option value="@DayOfWeek.Sunday">Sunday</option>
    <option value="@DayOfWeek.Monday">Monday</option>
    <option value="@DayOfWeek.Tuesday">Tuesday</option>
    <option value="@DayOfWeek.Wednesday">Wednesday</option>
    <option value="@DayOfWeek.Thursday">Thursday</option>
    <option value="@DayOfWeek.Friday">Friday</option>
    <option value="@DayOfWeek.Saturday">Saturday</option>
</select>

<Scheduler T="Appointment"
           Appointments="Appointments"
           OnAddingNewAppointment="OnAddNewAppointment"
           OnAppointmentClick="OnAppointmentClick"
           OnOverflowAppointmentClick="OnOverflowAppointmentClick"
           StartDayOfWeek="StartDayOfWeek"
           OnDayClick="DayClicked" />

@if (SelectedAppointment is not null)
{
    <div id="overlay" @onclick="CloseAppointment">
        <div class="popup" style="left: @(PopupX); top: @(PopupY);" @onclick:stopPropagation="true">
            <label>Title: </label><input type="text" @bind-value="SelectedAppointmentCopy.Title" /><br />
            <label>Start: </label><input type="text" @bind-value="SelectedAppointmentCopy.Start" /><br />
            <label>End: </label><input type="text" @bind-value="SelectedAppointmentCopy.End" /><br />
            <label>Color: </label><input type="text" @bind-value="SelectedAppointmentColor" /><br />

            @if (SelectedAppointmentEnableDelete)
            {
                <button stlye="margin-right: 5px;" @onclick="DeleteAppointment">Delete</button>
            }
            <button @onclick="SaveAppointment">Save</button>
        </div>
    </div>
}

@if (SelectedAppointments is not null)
{
    <div id="overlay" @onclick="() => SelectedAppointments = null">
        <div class="popup" style="left: @(PopupX); top: @(PopupY);" @onclick:stopPropagation="true">
            <ul>
                @foreach (var appointment in SelectedAppointments)
                {
                    <li style="--dot-color: @ToRgbString(appointment.Color)">@appointment.Title: @appointment.Start.ToShortDateString() to @appointment.End.ToShortDateString()</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<Appointment> Appointments = new();

    private string PopupX, PopupY;
    private DayOfWeek StartDayOfWeek = DayOfWeek.Sunday;

    // fields for editing the selected appointment
    private Appointment SelectedAppointment;
    private Appointment SelectedAppointmentCopy;
    private bool SelectedAppointmentEnableDelete;
    private string SelectedAppointmentColor
    {
        get => SelectedAppointmentCopy.Color.Name;
        set => SelectedAppointmentCopy.Color = Color.FromName(value);
    }

    // fields for viewing the overflowing appointments
    private IEnumerable<Appointment> SelectedAppointments;

    protected override void OnInitialized()
    {
        Appointments.AddRange(new List<Appointment>
        {
            new Appointment { Title = "Open Sourced Date", Start = new DateTime(2021, 7, 9), End = new DateTime(2021, 7, 9), Color = Color.Green },
            new Appointment { Title = "Vacation", Start = DateTime.Today.AddDays(4), End = DateTime.Today.AddDays(14), Color = Color.Pink },
            new Appointment { Title = "Really busy day 1", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 2", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 3", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 4", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 5", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 6", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },
            new Appointment { Title = "Really busy day 7", Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(1), Color = Color.Orange },

            new Appointment { Title = "New Year's Day", Start = new DateTime(DateTime.Today.Year, 1, 1), End = new DateTime(DateTime.Today.Year, 1, 1), Color = Color.Blue },
            new Appointment { Title = "Groundhog Day", Start = new DateTime(DateTime.Today.Year, 2, 2), End = new DateTime(DateTime.Today.Year, 2, 2), Color = Color.Blue },
            new Appointment { Title = "Valentine's Day", Start = new DateTime(DateTime.Today.Year, 2, 14), End = new DateTime(DateTime.Today.Year, 2, 14), Color = Color.Blue },
            new Appointment { Title = "St. Patrick's Day", Start = new DateTime(DateTime.Today.Year, 3, 17), End = new DateTime(DateTime.Today.Year, 3, 17), Color = Color.Blue },
            new Appointment { Title = "Earth Day", Start = new DateTime(DateTime.Today.Year, 4, 22), End = new DateTime(DateTime.Today.Year, 4, 22), Color = Color.Blue },
            new Appointment { Title = "Independence Day", Start = new DateTime(DateTime.Today.Year, 7, 4), End = new DateTime(DateTime.Today.Year, 7, 4), Color = Color.Blue },
            new Appointment { Title = "Patriot Day", Start = new DateTime(DateTime.Today.Year, 9, 11), End = new DateTime(DateTime.Today.Year, 9, 11), Color = Color.Blue },
            new Appointment { Title = "Halloween", Start = new DateTime(DateTime.Today.Year, 10, 31), End = new DateTime(DateTime.Today.Year, 10, 31), Color = Color.Blue },
            new Appointment { Title = "Veterans' Day", Start = new DateTime(DateTime.Today.Year, 11, 11), End = new DateTime(DateTime.Today.Year, 11, 11), Color = Color.Blue },
            new Appointment { Title = "Pearl Harbor Day", Start = new DateTime(DateTime.Today.Year, 12, 7), End = new DateTime(DateTime.Today.Year, 12, 7), Color = Color.Blue },
            new Appointment { Title = "Christmas Day", Start = new DateTime(DateTime.Today.Year, 12, 25), End = new DateTime(DateTime.Today.Year, 12, 25), Color = Color.Blue },
            new Appointment { Title = "New Year's Eve", Start = new DateTime(DateTime.Today.Year, 12, 31), End = new DateTime(DateTime.Today.Year, 12, 31), Color = Color.Blue },
        });
        base.OnInitialized();
    }

    private async Task EditAppointment(Appointment appointment, bool enableDelete = true)
    {
        SelectedAppointmentEnableDelete = enableDelete;
        SelectedAppointment = appointment;
        SelectedAppointmentCopy = SelectedAppointment.Copy();
        StateHasChanged();
        while (SelectedAppointment is not null)
        {
            await Task.Delay(50);
        }
    }

    private void CloseAppointment()
    {
        SelectedAppointment = null;
        StateHasChanged();
    }
    private void DeleteAppointment()
    {
        // delete from database here
        Appointments.Remove(SelectedAppointment);
        CloseAppointment();
    }
    private void SaveAppointment()
    {
        // save new changes to database here
        SelectedAppointment.Title = SelectedAppointmentCopy.Title;
        SelectedAppointment.Start = SelectedAppointmentCopy.Start;
        SelectedAppointment.End = SelectedAppointmentCopy.End;
        SelectedAppointment.Color = SelectedAppointmentCopy.Color;
        if (!Appointments.Contains(SelectedAppointment))
        {
            Appointments.Add(SelectedAppointment);
        }
        CloseAppointment();
    }

    private Task DayClicked(DateTime day)
    {
        var todaysAppointemnts = Appointments.Where(x => x.Start.Date <= day && x.End.Date >= day);
        if (todaysAppointemnts.Any())
        {
            (PopupX, PopupY) = ("50%", "50%");
            SelectedAppointments = todaysAppointemnts;
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private async Task OnAddNewAppointment(Appointment appointment)
    {
        (PopupX, PopupY) = ("50%", "50%");
        await EditAppointment(appointment, false);
    }
    private async Task OnAppointmentClick(Appointment appointment, MouseEventArgs mouse)
    {
        (PopupX, PopupY) = ($"{mouse.ClientX}px", $"{mouse.ClientY}px");
        await EditAppointment(appointment);
    }
    private Task OnOverflowAppointmentClick(IEnumerable<Appointment> appointments, MouseEventArgs mouse)
    {
        (PopupX, PopupY) = ($"{mouse.ClientX}px", $"{mouse.ClientY}px");
        SelectedAppointments = appointments;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private string ToRgbString(Color color)
    {
        return $"rgb({color.R}, {color.G}, {color.B})";
    }

    // create an implementation of BlazorScheduler.IAppointment that we can use to pass to the scheduler
    private class Appointment : IAppointment
    {
        public string Title { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public Color Color { get; set; }

        public Appointment Copy() => this.MemberwiseClone() as Appointment;
    }
}
